from django.shortcuts import render
from django.http import HttpResponse

from chartit import DataPool, Chart
from highcharts.views import HighChartsBarView


from .models import Which_Stock, News

# Create your views here.

# def index(request):
#     return HttpResponse("Welcome to the ftsefinance index page")

def index(request):
    context = dict()
    stocklist = Which_Stock.objects.order_by('-ticker')
    available_stocks = stocklist.exclude(ticker="INDEXFTSE:UKX")
    context['available_stocks']  = available_stocks
    try:
        context['FTSEData'] = stocklist.filter(ticker="INDEXFTSE:UKX")[0]
    except IndexError:
        context['FTSEData'] = ["Ftse data not fo

    movers = available_stocks.order_by('-change')
    try:
        context['stock_gainers'] = movers[:5]
    except IndexError:
        print("No Gains")

    try:
        context['stock_lossers'] = movers[len(movers)-5:len(movers)]
    except AssertionError:
        print("No lossers")

    recentnews = News.objects.order_by('-pub_date')
    try:
        context['recentnews'] = recentnews[:5]
    except IndexError:
        context['recentnews'] = ["News not found"]

    # context['pricechart'] = stock_data_plot("INDEXFTSE:UKX")
    # graphtitle = Which_Stock.objects.filter(ticker="INDEXFTSE:UKX")[0]
    # context['graphtitle'] = graphtitle.name
    return render(request, 'ftsefinance/home.html', context)

# def status(request):
#     context = testpage()
#     return render(request, 'main/status.html', context)

def stock_data_plot(ticker):
    # Grab source data
    q = Which_Stock.objects.get(ticker=ticker)
    data = q.stock_data_set.all()[:100]
    data = DataPool(
                   series=
                    [{'options': {'source': data},
                      'terms': ['close_price', 'max_price', 'min_price', 'date']}
                     ])
    # Custom x axis
    def date_xaxis(timezoneobject):
        return '-'.join([str(timezoneobject.day),
                        str(timezoneobject.month),
                        str(timezoneobject.year)])
    #Create the Chart object
    cht = Chart(
                datasource = data,
                series_options =
                    [{'options': {'type': 'line', 'stacking': False},
                    'terms':{'date': ['close_price', 'max_price', 'min_price']}
                    }],
                chart_options =
                    {'title': {'text': q.name},
                       'xAxis': {
                            'title': {
                               'text': 'Date'}}
                    },
                 x_sortf_mapf_mts = (None, date_xaxis, False))
    return cht

def plot(request, ticker):
    context = {'pricechart': stock_data_plot(ticker)}
    #Step 3: Send the chart object to the template.
    return render(request, 'ftsefinance/plot.html', context)
